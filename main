import os
import time
import schedule
import google.generativeai as genai
from dotenv import load_dotenv
import telegram
import asyncio
import pytz

# --- CONFIGURATION ---
load_dotenv()
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
MODEL_NAME = "models/gemini-2.5-flash"

# Global variable to store the morning's predictions for the evening report
morning_predictions_storage = ""

# Configure Google Gemini AI Model
try:
    genai.configure(api_key=GOOGLE_API_KEY)
    model = genai.GenerativeModel(MODEL_NAME)
    print(f"Google Gemini AI configured successfully with model '{MODEL_NAME}'.")
except Exception as e:
    print(f"Error configuring Gemini AI: {e}")
    exit()

# --- PROMPT 1: DAILY BRIEFING ---
DAILY_PROMPT_TEMPLATE = """
You are a top-tier geopolitical analyst AI. Your task is to provide a concise, clear, and actionable summary of global events for an investor.

1. Summarize the **latest global geopolitical events** in the past {time_period}.
2. Prioritize the events by **global importance**.
3. For each event, provide a structured analysis.

**Format your entire response strictly as follows, using the specified emojis and markdown:**

- - - - - - - - - -

üåç **Event:** [Name of the Event]
üë• **Actors:** [Countries/Actors Involved]

üí¨ **Summary:**
[A brief, clear summary of the event.]

üìà **Sector Impact:**
- [Up/Down Emoji] **[Sector Name]:** [Up/Down/Neutral] - *[Concise reasoning]*
- [Up/Down Emoji] **[Sector Name]:** [Up/Down/Neutral] - *[Concise reasoning]*

- - - - - - - - - -

üåç **Event:** [Name of the Next Event]
... (repeat for each significant event) ...

**Use these emojis for Sector Impact:**
- üü¢ for "Up"
- üî¥ for "Down"
- ‚ö™ for "Neutral"

Ensure the analysis is fresh, actionable, and easy to read on a mobile device. If there are no significant events, state that clearly.
"""

# --- PROMPT 2: ACCURACY REPORT (NEW) ---
ACCURACY_PROMPT_TEMPLATE = """
You are a "Financial Performance Analyst AI". Your task is to evaluate the accuracy of a set of morning predictions against the actual market performance of the day.

**Here is the analysis that was provided this morning:**
--- MORNING PREDICTIONS ---
{morning_predictions}
--- END OF PREDICTIONS ---

**Your Task:**
1.  For each "Sector Impact" predicted in the morning report, search your knowledge for the actual performance of that sector today.
2.  Compare the prediction (Up, Down, Neutral) with the actual outcome.
3.  Create a summary table that lists each prediction, the actual result, and whether it was a "Hit" or "Miss".
4.  Calculate an overall accuracy score based on the number of hits.
5.  Provide a brief, concluding remark on the day's forecasting performance.

**Format your entire response strictly as follows:**

- - - - - - - - - -

üéØ **Accuracy Report**

Here is the performance review of this morning's geopolitical briefing.

**Prediction vs. Reality:**
| Sector Prediction | Forecast | Actual Outcome | Result |
|---|---|---|---|
| [Sector Name] | [Predicted Move] | [Actual Move] | [Hit/Miss] |
| [Sector Name] | [Predicted Move] | [Actual Move] | [Hit/Miss] |
| ... | ... | ... | ... |

**Overall Accuracy:**
- **[Accuracy Percentage]%** ([Number] Hits / [Total Number] Predictions)

**Analyst's Remark:**
[A 1-2 sentence conclusion on the results.]

- - - - - - - - - -
"""


# --- TELEGRAM AND AI MODULES ---
async def send_telegram_message(message):
    if not message:
        print("Message is empty, not sending.")
        return
    try:
        bot = telegram.Bot(token=TELEGRAM_BOT_TOKEN)
        await bot.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            text=message,
            parse_mode='Markdown'
        )
        print("Message sent to Telegram successfully.")
    except Exception as e:
        print(f"Failed to send message to Telegram: {e}")


def get_ai_summary(prompt_template, **kwargs):
    print(f"Requesting AI summary...")
    prompt = prompt_template.format(**kwargs)
    try:
        response = model.generate_content(prompt)
        print("AI analysis received.")
        return response.text
    except Exception as e:
        print(f"An error occurred during Gemini analysis: {e}")
        return None


# --- JOB SCHEDULING FUNCTIONS ---
def run_24_hour_summary(title_prefix="", is_morning_briefing=False):
    global morning_predictions_storage
    title = f"{title_prefix}Geopolitical Briefing: Last 24 Hours"
    print(f"--- Running Job: {title} ---")
    summary = get_ai_summary(DAILY_PROMPT_TEMPLATE, time_period="24 hours")
    if summary:
        asyncio.run(send_telegram_message(f"**{title}**\n\n{summary}"))
        if is_morning_briefing:
            morning_predictions_storage = summary
            print("Morning predictions have been saved for the 5 PM accuracy report.")
    else:
        print("Could not retrieve the 24-hour summary.")


def run_2_hour_summary():
    title = "Geopolitical Update: Last 2 Hours"
    print(f"\n--- Running Job: {title} ---")
    summary = get_ai_summary(DAILY_PROMPT_TEMPLATE, time_period="2 hours")
    if summary and "no significant events" not in summary.lower():
        asyncio.run(send_telegram_message(f"**{title}**\n\n{summary}"))
    else:
        print("No significant events to report or could not retrieve summary.")


def run_accuracy_report():
    title = "Daily Accuracy Report"
    print(f"\n--- Running Job: {title} ---")
    if not morning_predictions_storage:
        print("No morning predictions found to generate an accuracy report.")
        asyncio.run(send_telegram_message("‚ö†Ô∏è Could not generate accuracy report: No morning predictions were saved."))
        return

    report = get_ai_summary(ACCURACY_PROMPT_TEMPLATE, morning_predictions=morning_predictions_storage)
    if report:
        asyncio.run(send_telegram_message(report))
    else:
        print("Could not retrieve the accuracy report.")


# --- MAIN EXECUTION BLOCK ---
if __name__ == "__main__":
    print("Starting Geopolitical Summary Bot...")

    # 1. Run the initial 24-hour report on startup.
    run_24_hour_summary(title_prefix="Initial ")

    # 2. Schedule recurring updates.
    indian_timezone = pytz.timezone("Asia/Kolkata")

    schedule.every(2).hours.do(run_2_hour_summary)

    # 3. Schedule the 7 AM morning briefing (and save its predictions).
    schedule.every().day.at("07:00", indian_timezone).do(run_24_hour_summary, title_prefix="‚òÄÔ∏è Good Morning! ",
                                                         is_morning_briefing=True)

    # 4. Schedule the 5 PM accuracy report (NEW).
    schedule.every().day.at("17:00", indian_timezone).do(run_accuracy_report)

    print("‚úÖ Bot is running with the final schedule:")
    print("- An update will be sent every 2 hours.")
    print("- A full 24-hour briefing will be sent every morning at 7:00 AM IST.")
    print("- An accuracy report will be sent every evening at 5:00 PM IST.")

    while True:
        schedule.run_pending()
        time.sleep(1)
